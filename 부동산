import React, { useEffect, useMemo, useState } from "react";
import { AlertTriangle, TrendingUp, TrendingDown, Activity, Filter, BarChart2, ArrowUpAZ, ArrowDownAZ, Loader2 } from "lucide-react";

// 타입 정의
type Trade = {
  id: number;
  district: string; // 구
  dong: string;     // 동
  complex: string;  // 단지명
  area: number;     // 전용면적(㎡)
  price: number;    // 거래금액(만원)
  date: string;     // YYYY-MM
  floor: number;
  buildYear: number;
};

// 유틸
const toPy = (m2: number) => m2 * 0.3025; // 1㎡ ≈ 0.3025평
const pricePerPy = (price: number, m2: number) => price / toPy(m2);
const keyOf = (d: Trade) => `${d.complex}__${d.area}__${d.date}`; // 월·단지·면적 그룹키
const stddev = (arr: number[]) => {
  if (arr.length < 2) return 0;
  const mean = arr.reduce((a, b) => a + b, 0) / arr.length;
  const variance = arr.reduce((s, x) => s + (x - mean) ** 2, 0) / (arr.length - 1);
  return Math.sqrt(variance);
};

export default function AnomalyDetectionSystem() {
  // ▼ 데이터 로딩 상태
  const [raw, setRaw] = useState<Trade[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // ▼ UI 상태
  const [selectedDistrict, setSelectedDistrict] = useState<string>("전체");
  const [minAnomalyScore, setMinAnomalyScore] = useState<number>(25);
  const [selectedMonth, setSelectedMonth] = useState<string>("전체");
  const [sortBy, setSortBy] = useState<"score-desc" | "price-desc" | "price-asc">("score-desc");
  const [useZscore, setUseZscore] = useState<boolean>(true);

  // ▼ 데이터 로딩 (public/daejeon_trades_2025.json)
  useEffect(() => {
    const url = "/daejeon_trades_2025.json"; // public 폴더 기준 경로
    setLoading(true);
    setError(null);
    fetch(url)
      .then(async (r) => {
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        const data = (await r.json()) as Trade[];
        // 기본 검증 (필수 필드 존재 여부)
        const ok = Array.isArray(data) && data.every(d =>
          d && typeof d.district === 'string' && typeof d.complex === 'string' && typeof d.area === 'number' && typeof d.price === 'number'
        );
        if (!ok) throw new Error("데이터 스키마가 예상과 다릅니다.");
        setRaw(data);
      })
      .catch((e) => setError(e.message || String(e)))
      .finally(() => setLoading(false));
  }, []);

  // ▼ 파생 값: 월, 구 목록
  const months = useMemo(() => ["전체", ...Array.from(new Set(raw.map(d => d.date))).sort()], [raw]);
  const districts = useMemo(() => ["전체", ...Array.from(new Set(raw.map(d => d.district)))], [raw]);

  // ▼ 그룹 통계 (월·단지·면적 기준)
  const groupStats = useMemo(() => {
    const map = new Map<string, { avg: number; std: number }>();
    const bucket = new Map<string, number[]>();
    for (const d of raw) {
      if (selectedMonth !== "전체" && d.date !== selectedMonth) continue;
      const k = keyOf(d);
      if (!bucket.has(k)) bucket.set(k, []);
      bucket.get(k)!.push(d.price);
    }
    for (const [k, arr] of bucket) {
      const avg = arr.reduce((a, b) => a + b, 0) / arr.length;
      const s = stddev(arr);
      map.set(k, { avg, std: s });
    }
    return map;
  }, [raw, selectedMonth]);

  // ▼ 이상치 산정 및 정렬
  const enriched = useMemo(() => {
    return raw
      .filter(d => (selectedDistrict === "전체" || d.district === selectedDistrict))
      .filter(d => (selectedMonth === "전체" || d.date === selectedMonth))
      .map(d => {
        const g = groupStats.get(keyOf(d));
        const avg = g?.avg ?? d.price;
        const sd = g?.std ?? 0;
        const deviationPct = ((d.price - avg) / (avg || 1)) * 100;
        const py = Math.round(pricePerPy(d.price, d.area));
        const avgPy = Math.round(pricePerPy(avg, d.area));
        const pyDeviation = Math.abs(py - avgPy);
        const z = sd > 0 ? (d.price - avg) / sd : 0;

        let score = 0;
        const reasons: string[] = [];
        if (deviationPct > 30) { score += 40; reasons.push("급격한 가격 상승"); }
        if (deviationPct < -20) { score += 35; reasons.push("급격한 가격 하락"); }
        if (d.floor <= 5 && deviationPct > 10) { score += 15; reasons.push("저층 가격 이상"); }
        if (pyDeviation > avgPy * 0.25) { score += 20; reasons.push("평당가 이상"); }
        if (useZscore && Math.abs(z) >= 2) { score += 25; reasons.push(`Z-score ${z.toFixed(1)}σ 이상`); }

        return {
          ...d,
          avgPrice: Math.round(avg),
          deviationPct,
          pricePerPy: py,
          avgPricePerPy: avgPy,
          z,
          anomalyScore: Math.min(100, Math.round(score)),
          anomalyReasons: reasons,
          isAnomaly: score >= minAnomalyScore,
        };
      })
      .sort((a, b) => {
        if (sortBy === "score-desc") return b.anomalyScore - a.anomalyScore;
        if (sortBy === "price-desc") return b.price - a.price;
        return a.price - b.price;
      });
  }, [raw, selectedDistrict, selectedMonth, minAnomalyScore, useZscore, sortBy, groupStats]);

  // ▼ 통계
  const stats = useMemo(() => {
    const anomalies = enriched.filter(d => d.isAnomaly);
    const high = anomalies.filter(d => d.deviationPct > 0).length;
    const low = anomalies.filter(d => d.deviationPct < 0).length;
    return {
      total: enriched.length,
      anomalies: anomalies.length,
      high,
      low,
      rate: enriched.length ? ((anomalies.length / enriched.length) * 100).toFixed(1) : "0.0",
    };
  }, [enriched]);

  const visible = enriched.filter(d => d.isAnomaly);

  // ▼ 로딩/에러 화면
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="bg-white rounded-xl shadow p-6 flex items-center gap-3 text-gray-700">
          <Loader2 className="animate-spin" /> 데이터 불러오는 중...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-red-50">
        <div className="bg-white border border-red-200 rounded-xl shadow p-6 text-red-700">
          <div className="font-semibold mb-1">데이터 로딩 실패</div>
          <div className="text-sm">{error}</div>
          <div className="text-xs text-gray-500 mt-2">public/daejeon_trades_2025.json 위치와 형식을 확인해주세요.</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* 헤더 */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-2 flex items-center gap-3">
            <AlertTriangle className="text-orange-500" size={32} />
            대전광역시 부동산 이상거래 탐지 시스템
          </h1>
          <p className="text-gray-600">동일 월·단지·면적 기준 통계 + Z-score 기반 정량 탐지</p>
        </div>

        {/* 통계 카드 */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-lg shadow p-5">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">분석 대상</p>
                <p className="text-2xl font-bold text-gray-800">{stats.total}건</p>
              </div>
              <Activity className="text-blue-500" size={32} />
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-5">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">이상거래</p>
                <p className="text-2xl font-bold text-orange-600">{stats.anomalies}건</p>
                <p className="text-xs text-gray-500">({stats.rate}%)</p>
              </div>
              <AlertTriangle className="text-orange-500" size={32} />
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-5">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">급등 의심</p>
                <p className="text-2xl font-bold text-red-600">{stats.high}건</p>
              </div>
              <TrendingUp className="text-red-500" size={32} />
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-5">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">급락 의심</p>
                <p className="text-2xl font-bold text-blue-600">{stats.low}건</p>
              </div>
              <TrendingDown className="text-blue-500" size={32} />
            </div>
          </div>
        </div>

        {/* 필터 */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex items-center gap-2 mb-4">
            <Filter size={20} className="text-gray-600" />
            <h2 className="text-lg font-semibold text-gray-800">필터 및 정렬</h2>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">자치구</label>
              <select value={selectedDistrict} onChange={(e) => setSelectedDistrict(e.target.value)} className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                {districts.map(d => <option key={d} value={d}>{d}</option>)}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">월 선택</label>
              <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)} className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                {months.map(m => <option key={m} value={m}>{m}</option>)}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">민감도: {minAnomalyScore}점 이상</label>
              <input type="range" min={10} max={70} step={5} value={minAnomalyScore} onChange={(e) => setMinAnomalyScore(parseInt(e.target.value))} className="w-full" />
              <div className="flex justify-between text-xs text-gray-500 mt-1"><span>낮음</span><span>높음</span></div>
            </div>
          </div>

          <div className="mt-4 flex flex-col md:flex-row gap-3 items-start md:items-center">
            <label className="inline-flex items-center gap-2 text-sm text-gray-700">
              <input type="checkbox" className="rounded border-gray-300" checked={useZscore} onChange={(e) => setUseZscore(e.target.checked)} />
              Z-score 규칙 사용 (±2σ)
            </label>
            <div className="ml-auto flex items-center gap-2">
              <span className="text-sm text-gray-700">정렬</span>
              <select value={sortBy} onChange={(e) => setSortBy(e.target.value as any)} className="p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <option value="score-desc">위험도 높은 순</option>
                <option value="price-desc">가격 높은 순</option>
                <option value="price-asc">가격 낮은 순</option>
              </select>
              {sortBy === 'price-desc' ? <ArrowDownAZ size={18} className="text-gray-500"/> : sortBy === 'price-asc' ? <ArrowUpAZ size={18} className="text-gray-500"/> : <BarChart2 size={18} className="text-gray-500"/>}
            </div>
          </div>
        </div>

        {/* 이상거래 표 */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-800">이상거래 탐지 결과 ({visible.length}건)</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">위험도</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">자치구</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">단지명</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">면적</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">거래가</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">평당가</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">편차(%)</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Z</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">이상사유</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {visible.length === 0 ? (
                  <tr>
                    <td colSpan={9} className="px-4 py-8 text-center text-gray-500">탐지된 이상거래가 없습니다.</td>
                  </tr>
                ) : (
                  visible.map(item => (
                    <tr key={item.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3">
                        <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-sm ${item.anomalyScore >= 70 ? 'bg-red-100 text-red-700' : item.anomalyScore >= 40 ? 'bg-orange-100 text-orange-700' : 'bg-yellow-100 text-yellow-700'}`}>
                          {item.anomalyScore}
                        </div>
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-900">{item.district}</td>
                      <td className="px-4 py-3">
                        <div className="text-sm font-medium text-gray-900">{item.complex}</div>
                        <div className="text-xs text-gray-500">{item.dong} / {item.floor}층 / {item.date}</div>
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-900">{item.area}㎡</td>
                      <td className="px-4 py-3">
                        <div className="text-sm font-semibold text-gray-900">{item.price.toLocaleString()}만원</div>
                        <div className="text-xs text-gray-500">평균: {item.avgPrice.toLocaleString()}만원</div>
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-900">{item.pricePerPy.toLocaleString()}만원</td>
                      <td className="px-4 py-3">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${item.deviationPct > 0 ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}`}>
                          {item.deviationPct > 0 ? '+' : ''}{item.deviationPct.toFixed(1)}%
                        </span>
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-900">{item.z.toFixed(1)}</td>
                      <td className="px-4 py-3">
                        <div className="flex flex-wrap gap-1">
                          {item.anomalyReasons.map((r: string, i: number) => <span key={i} className="inline-flex px-2 py-1 text-xs bg-orange-50 text-orange-700 rounded">{r}</span>)}
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* 안내 */}
        <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="text-sm font-semibold text-blue-800 mb-2">📊 탐지 알고리즘</h3>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>• <strong>집계 기준</strong>: 동일 <em>월·단지·면적</em> 그룹 평균 및 표준편차 사용</li>
            <li>• <strong>급격한 가격 상승</strong>: 그룹 평균 대비 +30% 이상</li>
            <li>• <strong>급격한 가격 하락</strong>: 그룹 평균 대비 −20% 이하</li>
            <li>• <strong>저층 가격 이상</strong>: 5층 이하이면서 +10% 초과</li>
            <li>• <strong>평당가 이상</strong>: 그룹 평균 평당가 대비 25% 초과</li>
            <li>• <strong>Z-score</strong>: |Z| ≥ 2 시 추가 가점(선택)</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
